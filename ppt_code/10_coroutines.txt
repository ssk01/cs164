def preorder(node)
     if (node) { 
           preorder(node.left)
           yield(node.key)
           preorder(node.right)
     }
     null
}
def preorder_iterator(tree) {
     def co = coroutine(lambda(t){ preorder(t) })
     lambda () { resume(co, tree) }
}
 def merge(t1,t2) { 
     def it1=preorder_iterator(t1)
     def it2=preorder_iterator(t2)
     def v1=it1()
     def v2=it2()
     while (v1 || v2) { 
         if (v1 != null and (v2==null or v1<v2)) { 
             yeild(v1); v1=it1()
         } else {
             yeild(v2); v2=it2()
         }
     }
 }
for v in mergeTreeIterator(tree1,tree2) {
	process(v)
}
function mergeTreeIterator(tree1,tree2) {
  def co = coroutine(lambda(tree1, trr2){mergeTreeIterator(tree1, tree2)})
  lambda(){resume(co, tree1, tree2}
}
for v in merge3TreeIterator(tr1,tr2,tr3)

function merge3TreeIterator(tree1, tree2, tree3)
    def it1=preorder_iterator(t1)
	def it2 = mergeTreeIterator(tree2, tree3)
	def v1 = it1
	def v2 = it2
	def v1=it1()
    def v2=it2()
    while (v1 || v2) { 
         if (v1 != null and (v2==null or v1<v2)) { 
             yeild(v1); v1=it1()
         } else {
             yeild(v2); v2=it2()
         }
    }