def f(unused){
    yield(1)
    2
}
def co = coroutine(f)
print 222
print resume(co,null)
print 233
print resume(co,null)
print 222
print resume(co,null)

_________________________
def k(x, y) {
    yield(x+y)
}
def g(x) {
    def ck = coroutine(k)
    def h(a, b) {
         yield(resume(ck, a, b)+3)
    }
    h(x, 3)
}
def f(x, y) {
    def cg = coroutine(g)
    print resume(cg, x+ y)
}
print f(1,2)
_________________________________
def f(unused){
    yield(1)
    2
}
def co = coroutine(f)
print 222
print resume(co,null)
print 233
_________________________________
lambda(){print 1}()
def f(){
print 1
}
def g(){
print 2
}
ite(1, f,g)()


def g(a){
    a+1
}
print g(1+2)

def iter() {
    def i = 0
    lambda () {
        if (i < 10) {
            i = i + 1
            i 
        } else {
            null    
        }
    } 
}
def f = iter()
print f()
print f()



Object.new = lambda(self, obj) {
    if (obj == null) {
        obj = {}
    }
    print 'fuck'
    print self
    setmetatable(obj, self)
    self.__index = self
    obj
}



def _getIterator_(list) {
    # 0-1 because we currently don't support unary minus
    def i = 0-1
    lambda() {
         i = i + 1
         if (i < len(list)) { list[i]
         } else { null } # terminates iteration
    } 
}
def l1 = {}
l1[0] = 0
l1[1] = 1
l1[2] = 2
def l2 = _getIterator_(l1)
print l2()
print l2()
print l2()